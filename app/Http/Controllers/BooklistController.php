<?php

namespace App\Http\Controllers;

use App\Models\bookaction;
use App\Models\booklist;
use App\Models\borrowpage;
use App\Models\copies;
use App\Models\studentlist;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;


class BooklistController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $books = booklist::where('ishide', false)->paginate(10);
        return view('booklist', compact('books'));
    }
    public function create()
    {
    }

    public function store(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'title' => 'required',
                'author' => 'required',
                'copyright' => 'required|date_format:Y',
                'accession' => 'required|numeric',
                'copies' => 'required|numeric|min:0',
            ]);

            if ($validator->fails()) {
                return response()->json([
                    'status' => 400,
                    'errors' => $validator->messages()
                ]);
            }

            $book = booklist::create([
                'title' => $request->title,
                'author' => $request->author,
                'copyright' => $request->copyright,
                'accession' => $request->accession,
            ]);
            copies::create([
                'bookid' => $book->id,
                'action' => "added",
                'copies' => $request->copies
            ]);

            bookaction::create([
                'bookid' => $book->id,
                'action' => "added",
                'performby' => Auth::user()->name
            ]);

            return response()->json([
                'status' => 200,
                'message' => 'Book Added Successfully.'
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'error' => $e->getMessage()
            ]);
        }
    }
    public function test(Request $request)
    {
        // Retrieve the input values from the request
        $title = $request->input('title');
        $author = $request->input('author');
        $copyright = $request->input('copyright');
        $accession = $request->input('accession');
        $copies = $request->input('copies');

        // Create a new instance of the BookList model
        $book = new BookList(); // Assuming your model name is "BookList"
        $copy = new Copies(); // Assuming your model name is "Copies"

        // Set the values of the model attributes
        $book->title = $title;
        $book->author = $author;
        $book->copyright = $copyright;
        $book->accession = $accession;

        // Save the book to the database
        $book->save();

        // Get the book ID generated by the database
        $bookId = $book->id;

        // Create a new copy record and associate it with the book
        $copy->bookid = $bookId;
        $copy->action = 'added';
        $copy->copies = $copies;

        // Save the copy to the database
        $copy->save();

        // Return a response indicating the success
        return response()->json(['message' => 'Data inserted successfully']);
    }

    public function updatebooks(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'title' => 'required',
                'author' => 'required',
                'copyright' => 'required|date_format:Y',
                'accession' => 'required|numeric',
            ]);
            if ($validator->fails()) {
                return response()->json([
                    'status' => 400,
                    'errors' => $validator->messages()
                ]);
            }
            $book = booklist::find($request->id);
            $book->update([
                'title' => $request->title,
                'author' => $request->author,
                'copyright' => $request->copyright,
                'accession' => $request->accession
            ]);
            bookaction::create([
                'bookid' => $book->id,
                'action' => "updated the book",
                'performby' => Auth::user()->name
            ]);
            return response()->json([
                'status' => 200,
                'message' => 'Book updated successfully'
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'error' => $e->getMessage()
            ]);
        }
    }

    public function get_book($data)
    {
        // $book = booklist::find($data);
        // return compact('book');
        $book = BookList::join('copies', 'booklists.id', 'copies.bookid')
            ->where('booklists.id', $data)
            ->where('copies.copies', '=>', 0)
            ->orderBy('booklists.id', 'desc')
            ->first();

        return compact('book');
    }

    public function get_status($data, $studentid)
    {
        $studentno = studentlist::where('studentno', $studentid)->value('id');
        $bookstatus = borrowpage::join('booklists', 'booklists.id', 'borrowpages.bookid')
            ->join('copies', 'copies.bookid', 'borrowpages.bookid')
            ->where('borrowpages.studentid', $studentno)
            ->where('borrowpages.bookid', $data)
            ->orderBy('borrowpages.id', 'desc')->first();
        return compact('bookstatus');
    }
}
